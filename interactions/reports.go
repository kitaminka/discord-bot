package interactions

import (
	"fmt"
	"github.com/bwmarrin/discordgo"
	"github.com/kitaminka/discord-bot/cfg"
	"log"
)

func reportMessageCommandHandler(session *discordgo.Session, interactionCreate *discordgo.InteractionCreate) {
	reportedMessage := interactionCreate.ApplicationCommandData().Resolved.Messages[interactionCreate.ApplicationCommandData().TargetID]
	reportedMessageContent := fmt.Sprintf("```%v```", reportedMessage.Content)
	reportedMessageUrl := fmt.Sprintf("https://discord.com/channels/%v/%v/%v", interactionCreate.GuildID, interactionCreate.ChannelID, reportedMessage.ID)
	reportedMessageSenderMention := fmt.Sprintf("<@%v>", reportedMessage.Author.ID)
	reportSenderMention := fmt.Sprintf("<@%v>", interactionCreate.Member.User.ID)

	err := session.InteractionRespond(interactionCreate.Interaction, &discordgo.InteractionResponse{
		Type: discordgo.InteractionResponseDeferredChannelMessageWithSource,
		Data: &discordgo.InteractionResponseData{
			Flags: discordgo.MessageFlagsEphemeral,
		},
	})
	if err != nil {
		log.Println("Error responding to interaction: ", err)
	}

	_, err = session.ChannelMessageSendComplex("1121453163451514880", &discordgo.MessageSend{
		Embeds: []*discordgo.MessageEmbed{
			{
				Title: "–†–µ–ø–æ—Ä—Ç",
				Fields: []*discordgo.MessageEmbedField{
					{
						Name:  "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Ä–µ–ø–æ—Ä—Ç–∞",
						Value: reportSenderMention,
					},
					{
						Name:  "–°–æ–æ–±—â–µ–Ω–∏–µ",
						Value: reportedMessageUrl,
					},
					{
						Name:  "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è",
						Value: reportedMessageSenderMention,
					},
					{
						Name:  "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
						Value: reportedMessageContent,
					},
				},
				Color: cfg.Config.EmbedColors.Default,
			},
		},
		Components: []discordgo.MessageComponent{
			discordgo.ActionsRow{
				Components: []discordgo.MessageComponent{
					Components["resolve_report"].MessageComponent,
				},
			},
		},
	})
	if err != nil {
		followupErrorMessageCreate(session, interactionCreate.Interaction, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∞—à–µ–≥–æ —Ä–µ–ø–æ—Ä—Ç–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
		log.Println("Error sending report: ", err)
		return
	}

	_, err = session.FollowupMessageCreate(interactionCreate.Interaction, true, &discordgo.WebhookParams{
		Embeds: []*discordgo.MessageEmbed{
			{
				Title:       "–†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
				Description: "–í–∞—à —Ä–µ–ø–æ—Ä—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
				Fields: []*discordgo.MessageEmbedField{
					{
						Name:  "–°–æ–æ–±—â–µ–Ω–∏–µ",
						Value: reportedMessageUrl,
					},
					{
						Name:  "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è",
						Value: reportedMessageSenderMention,
					},
				},
				Color: cfg.Config.EmbedColors.Default,
			},
		},
	})
	if err != nil {
		log.Println("Error creating followup message: ", err)
	}
}

func resolveReportHandler(session *discordgo.Session, interactionCreate *discordgo.InteractionCreate) {
	if len(interactionCreate.Message.Embeds) != 1 {
		followupErrorMessageCreate(session, interactionCreate.Interaction, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —Ä–µ–ø–æ—Ä—Ç–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
		log.Println("Report message is invalid")
		return
	}

	reportResolverMention := fmt.Sprintf("<@%v>", interactionCreate.Member.User.ID)
	reportMessageEmbed := interactionCreate.Message.Embeds[0]

	err := session.InteractionRespond(interactionCreate.Interaction, &discordgo.InteractionResponse{
		Type: discordgo.InteractionResponseDeferredChannelMessageWithSource,
		Data: &discordgo.InteractionResponseData{
			Flags: discordgo.MessageFlagsEphemeral,
		},
	})
	if err != nil {
		log.Println("Error responding to interaction: ", err)
	}

	resolvedReportMessage, err := session.ChannelMessageSendComplex("1122193280445194340", &discordgo.MessageSend{
		Embeds: []*discordgo.MessageEmbed{
			{
				Title: "–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π —Ä–µ–ø–æ—Ä—Ç",
				Fields: append(reportMessageEmbed.Fields, &discordgo.MessageEmbedField{
					Name:  "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ–ª—å",
					Value: reportResolverMention,
				}),
				Color: cfg.Config.EmbedColors.Default,
			},
		},
		Components: []discordgo.MessageComponent{
			discordgo.ActionsRow{
				Components: []discordgo.MessageComponent{
					&discordgo.Button{
						Label:    "–í–µ—Ä–Ω—É—Ç—å",
						Style:    discordgo.PrimaryButton,
						CustomID: "return_report",
						Emoji: discordgo.ComponentEmoji{
							Name: "üîÑ",
						},
					},
				},
			},
		},
	})
	if err != nil {
		followupErrorMessageCreate(session, interactionCreate.Interaction, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —Ä–µ–ø–æ—Ä—Ç–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
		log.Println("Error sending resolved report: ", err)
		return
	}
	err = session.ChannelMessageDelete(interactionCreate.Message.ChannelID, interactionCreate.Message.ID)
	if err != nil {
		err = session.ChannelMessageDelete(resolvedReportMessage.ChannelID, resolvedReportMessage.ID)
		if err != nil {
			log.Println("Error deleting resolved report: ", err)
		}
		followupErrorMessageCreate(session, interactionCreate.Interaction, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —Ä–µ–ø–æ—Ä—Ç–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
		log.Println("Error deleting report: ", err)
		return
	}

	_, err = session.FollowupMessageCreate(interactionCreate.Interaction, true, &discordgo.WebhookParams{
		Embeds: []*discordgo.MessageEmbed{
			{
				Title:       "–†–µ–ø–æ—Ä—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω",
				Description: "–†–µ–ø–æ—Ä—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ.",
				Color:       cfg.Config.EmbedColors.Default,
			},
		},
	})
	if err != nil {
		log.Println("Error creating followup message: ", err)
	}
}

func returnReportHandler(session *discordgo.Session, interactionCreate *discordgo.InteractionCreate) {
	if len(interactionCreate.Message.Embeds) != 1 {
		followupErrorMessageCreate(session, interactionCreate.Interaction, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ —Ä–µ–ø–æ—Ä—Ç–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
		log.Println("Resolved report message is invalid")
		return
	}

	resolvedReportMessageEmbed := interactionCreate.Message.Embeds[0]

	err := session.InteractionRespond(interactionCreate.Interaction, &discordgo.InteractionResponse{
		Type: discordgo.InteractionResponseDeferredChannelMessageWithSource,
		Data: &discordgo.InteractionResponseData{
			Flags: discordgo.MessageFlagsEphemeral,
		},
	})
	if err != nil {
		log.Println("Error responding to interaction: ", err)
	}

	resolvedReportMessage, err := session.ChannelMessageSendComplex("1121453163451514880", &discordgo.MessageSend{
		Embeds: []*discordgo.MessageEmbed{
			{
				Title:  "–†–µ–ø–æ—Ä—Ç",
				Fields: resolvedReportMessageEmbed.Fields[:len(resolvedReportMessageEmbed.Fields)-1],
				Color:  cfg.Config.EmbedColors.Default,
			},
		},
		Components: []discordgo.MessageComponent{
			discordgo.ActionsRow{
				Components: []discordgo.MessageComponent{
					&discordgo.Button{
						CustomID: "resolve_report",
						Label:    "–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ",
						Style:    discordgo.SuccessButton,
						Emoji: discordgo.ComponentEmoji{
							Name: "‚úÖ",
						},
					},
				},
			},
		},
	})
	if err != nil {
		followupErrorMessageCreate(session, interactionCreate.Interaction, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ —Ä–µ–ø–æ—Ä—Ç–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
		log.Println("Error sending report: ", err)
		return
	}
	err = session.ChannelMessageDelete(interactionCreate.Message.ChannelID, interactionCreate.Message.ID)
	if err != nil {
		err = session.ChannelMessageDelete(resolvedReportMessage.ChannelID, resolvedReportMessage.ID)
		if err != nil {
			log.Println("Error deleting report: ", err)
		}
		followupErrorMessageCreate(session, interactionCreate.Interaction, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ —Ä–µ–ø–æ—Ä—Ç–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.")
		log.Println("Error deleting resolved report: ", err)
		return
	}

	_, err = session.FollowupMessageCreate(interactionCreate.Interaction, true, &discordgo.WebhookParams{
		Embeds: []*discordgo.MessageEmbed{
			{
				Title:       "–†–µ–ø–æ—Ä—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω",
				Description: "–†–µ–ø–æ—Ä—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –Ω–µ—Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ.",
				Color:       cfg.Config.EmbedColors.Default,
			},
		},
	})
	if err != nil {
		log.Println("Error creating followup message: ", err)
	}
}
